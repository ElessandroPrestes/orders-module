services:
  # Containers PHP-FPM
  order_app1:
    image: elessandrodev/php-core:v1.0.3
    container_name: order_app1
    working_dir: /var/www
    restart: unless-stopped
    command: php-fpm
    volumes:
      - ./:/var/www
    expose:
      - 9000
    environment:
      APP_ENV: local
      APP_DEBUG: true
    depends_on:
      order_postgres:
        condition: service_healthy
      order_redis:
        condition: service_healthy
    networks:
      - api_network

  order_app2:
    image: elessandrodev/php-core:v1.0.3
    container_name: order_app2
    working_dir: /var/www
    restart: unless-stopped
    command: php-fpm
    volumes:
      - ./:/var/www
    expose:
      - 9000
    environment:
      APP_ENV: local
      APP_DEBUG: true
    depends_on:
      order_postgres:
        condition: service_healthy
      order_redis:
        condition: service_healthy
    networks:
      - api_network

  # Horizon
  order_horizon:
    image: elessandrodev/php-core:v1.0.1
    container_name: order_horizon
    working_dir: /var/www
    restart: on-failure
    command: php artisan horizon
    volumes:
      - ./:/var/www
    environment:
      APP_ENV: local
      APP_DEBUG: true
    depends_on:
      order_redis:
        condition: service_healthy
    networks:
      - api_network

  # Scheduler
  order_scheduler:
    image: elessandrodev/php-core:v1.0.1
    container_name: order_scheduler
    working_dir: /var/www
    restart: on-failure
    command: sh -c "while true; do php artisan schedule:run --verbose --no-interaction; sleep 60; done"
    volumes:
      - ./:/var/www
    environment:
      APP_ENV: local
      APP_DEBUG: true
    depends_on:
      order_postgres:
        condition: service_healthy
      order_redis:
        condition: service_healthy
    networks:
      - api_network

  # Nginx
  order_nginx:
    image: nginx:1.25-alpine
    container_name: order_nginx
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - order_app1
      - order_app2
    networks:
      - api_network

  # PostgreSQL
  order_postgres:
    image: postgres:16-alpine
    container_name: order_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    networks:
      - api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Redis
  order_redis:
    image: redis:7.2.4-alpine
    container_name: order_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - api_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Adminer
  order_adminer:
    image: adminer:4.8.1
    container_name: order_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - order_postgres
    networks:
      - api_network

# Networks
networks:
  api_network:
    driver: bridge

# Volumes
volumes:
  nginx_conf:
  postgres_data:
